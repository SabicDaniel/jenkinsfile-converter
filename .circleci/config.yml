version: 2.1

orbs:
  docker: circleci/docker@1.0.1

jobs:
  build-and-unit-test-base:
    docker:
      - image: circleci/node:12.8.0
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v1-npm-deps-{{ .Branch }}
            - v1-npm-deps
      - run:
          name: install dependencies
          command: npm i
      - save_cache:
          key: v1-npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: run unit tests
          command: npm test

  generate-configs:
    docker:
      - image: circleci/node:12.8.0
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v1-npm-deps-{{ .Branch }}
            - v1-npm-deps
      - run:
          name: install dependencies
          command: npm i
      - save_cache:
          key: v1-npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: create artifacts dir
          command: mkdir -p ~/project/artifacts
      - run:
          name: create config.yml
          command: ~/project/test/createConfigs.sh
      - store_artifacts:
          path: ~/project/artifacts
      - persist_to_workspace:
          root: ~/project
          paths:
            - artifacts/
            - test/validateConfigs.sh

  output-smoke-test:
    docker:
      - image: circleci/node:12.8.0
    working_directory: ~/project
    steps:
      - run:
          name: install CircleCI CLI
          command: curl -fLSs --http1.1 https://circle.ci/cli | sudo bash
      - attach_workspace:
          at: ~/project
      - run:
          name: validate configs
          command: ~/project/test/validateConfigs.sh

  clean-build-for-docker-image:
    docker:
      - image: cimg/node:stable
    steps:
      - checkout
      - run:
          name: Compute version number
          command: |
            echo "0.0.${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:7}" | tee version.txt
            echo "export __BUILD_VERSION=\"$(cat version.txt)\"" >> $BASH_ENV
      - restore_cache:
          keys:
            - v1-npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v1-npm-deps-{{ .Branch }}
            - v1-npm-deps
      - run:
          name: install dependencies for base module
          command: npm i
      - save_cache:
          key: v1-npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: webpack base module
          command: npm run build
          environment:
            __JENKINS_TARGET: 'http://jenkins.jfc-containers.local:8080/pipeline-model-converter/toJson'
      - store_artifacts:
          path: dist/jfc-module.js
      - run:
          name: Copy the webpacked module for server
          command: cp dist/jfc-module.js server/assets
      - restore_cache:
          keys:
            - server-yarn-deps-{{ checksum "yarn.lock" }}
            - server-yarn-deps
      - run:
          name: yarn install (for server)
          command: yarn install
          working_directory: server
      - save_cache:
          paths:
            - server/node_modules
          key: yarn-deps-{{ checksum "yarn.lock" }}-{{ epoch }}
      - run:
          name: Production build for server
          command: |
            yarn build
          working_directory: server
      - store_artifacts:
          path: server/dist/server.js
      - run:
          name: Test server
          command: yarn test
      - setup_remote_docker:
          docker_layer_caching: false
      - docker/check:
            registry: $DOCKER_REGISTRY
      - docker/build:
            image: $DOCKER_IMAGE_NAME
            tag: $__BUILD_VERSION
            registry: $DOCKER_REGISTRY
            path: server
      - docker/push:
            image: $DOCKER_IMAGE_NAME
            tag: $__BUILD_VERSION
            registry: $DOCKER_REGISTRY

workflows:
  version: 2
  btd:
    jobs:
      - build-and-unit-test-base:
          filters:
            branches:
              ignore:
                - json-conversion
      - generate-configs:
          filters:
            branches:
              ignore:
                - json-conversion
          requires:
            - build-and-unit-test-base
      - output-smoke-test:
          filters:
            branches:
              ignore:
                - json-conversion
          requires:
            - generate-configs
      - clean-build-for-docker-image:
          context: docker-hub
